---
title: "Dzień 3 - Sortowanie"
format: html
---


Kod nr 1
```python
from operator import attrgetter


class Employee:

    def __init__(self, name, dept):
        self.name = name
        self.dept = dept

    def __repr__(self):
        return '{' + self.name + ', ' + self.dept + '}'


workers = [
    Employee('James', 'Telecom'),
    Employee('Robert', 'Construction'),
    Employee('James', 'Finance')
]

# sort by `name` and `dept` attribute
workers.sort(key=attrgetter('name', 'dept'))

# [{James, Finance}, {James, Telecom}, {Robert, Construction}]
print(workers)
```


Kod nr 3
```python
class Person(object):

    def __init__(self, firstname, lastname):
        self.first = firstname
        self.last = lastname

    def __eq__(self, other):
        return ((self.last, self.first) == (other.last, other.first))

    def __ne__(self, other):
        return ((self.last, self.first) != (other.last, other.first))

    def __lt__(self, other):
        return ((self.last, self.first) < (other.last, other.first))

    def __le__(self, other):
        return ((self.last, self.first) <= (other.last, other.first))

    def __gt__(self, other):
        return ((self.last, self.first) > (other.last, other.first))

    def __ge__(self, other):
        return ((self.last, self.first) >= (other.last, other.first))

    def __repr__(self):
        return f"{self.first} {self.last}"

```

| Operator | Metoda |
|----------|--------|
| `==`       | `__eq__` |
| `!=`      | `__ne__` |
| `<`        | `__lt__` |
| `<=`       | `__le__` |
| `>`        | `__gt__` |
| `>=`       | `__ge__` |

Kod nr 4:
```python
class Person:

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __repr__(self):
        return f"{self.name} {self.age}"

    def __lt__(self, other):
        # sortowanie wg wieku rosnąco
        return self.age < other.age
        # sortowanie wg wieku malejąco
        # return other.age < self.age


people = [Person("Jan", 20), Person("Tomasz", 33), Person("Anna", 15),
          Person("Anna", 27), Person("Sylwia", 44)]
print(people)
people.sort()
print(people)

```

Ćwiczenia. Stwórz listę osób, książek, filmów itp i posortują ją różnymi sposobami.


Kod nr 5:
```python
class Person(object):

    def __init__(self, firstname, lastname):
        self.first = firstname
        self.last = lastname

    def __lt__(self, other):
        if isinstance(other, Person):
            return (self.last, self.first) < (other.last, other.first)
        elif isinstance(other, int):
            return len(self.last) < other

    def __repr__(self):
        return f"{self.first} {self.last}"


p1 = Person("Anna", "Nowak")
p2 = Person("Anna", "Kowalska")
print(p1 < 4)
print(p2 < p1)
```




Ćwiczenie 1. Stwórz klasę `Book` z polami `author`, `title`, `price`. Stwórz listę 10 książek i posortuj je po długości tytułu (od najkrótszego do najdłuższego).

Ćwiczenie 2. Wykorzystaj kod <https://gist.github.com/pjastr/fccff73cd1e2052c374978ae78982e01> i dodaj do klasy bazowej metodę `__lt__`. Następnie stwórz listę elementów różnych typów i ją posortuj. Wyświetl listę po sortowaniu.

Wskazówka: w razie potrzeby zamień funkcję `__str__` na `__repr__`.