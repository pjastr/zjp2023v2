---
title: "Mini-projekt"
format: html
---



# Mini - projekt

Rozwiązanie proszę o umieszczenie na dowolnym dysku sieciowym (może być na dysku Google/repozytorium na Githubie itp.). Proszę o nie wysyłanie kodów źródłowych w treści lub jako załącznik gdyż serwery pocztowe często to blokują.

Adres zwrotny: piotr.jastrzebski@edukacja.uwm.edu.pl

**Uwaga: wystarczy zrealizować min. dowolna dwa z poniższych zadań. Czas realizacji do końca kwietnia.**

W ciągu ok. 7 dni roboczych proszę o oczekiwanie na informację zwrotną.

Zadanie 1. Stwórz klasę `Time` zajmującą się obsługą czasu. Dodaj w niej dwa pola (zmienna) o nazwie `hour` i `minute` do przechowywania godzin i minut. W klasie dodaj następujące metody:

* funkcja, która zwraca wartość logiczną sprawdzającą czy zawartość pól może być poprawną godziną w formacie 24-godzinnym

* funkcja, która odpowiada za dodawanie dwóch obiektów typu `Time`. W środku należy dodać godziny do godzin, minuty do minuty. Jeśli minuty są większe lub równe niż 60, to należy odpowiednie zwiększyć pole godzin i pomniejszyć o 60 minuty. Jeśli godziny są większe lub równe niż 24, to należy od godzin odjąć 24. Funkcja ma zwrócić obiekt typu `Time` przechowujący "sumę".

* dodaj odpowiednią metodę, która odpowiada za sortowanie obiektów typu `Time` (wg dowolnego wybranego przez siebie klucza)

Następnie stwórz co najmniej 3 obiekty i wywołaj na nich każdą z funkcji co najmniej 1 raz.

Zadanie 2. Stwórz klasę `Movie` z polami przechowującymi tytuł, rok oraz ocenę filmu. Dodaj w klasie konstruktor (metodę `__init__`) ustawiającą wszystkie pola tej klasy.

Następnie stwórz listę zawierającą co najmniej 10 obiektów tego typu. Posortuj listę wg różnych klucz na co najmniej 5 różnych sposobów. W komentarzach umieść informację o zasadach sortowania.


Zadanie 3. Napisz klasę `Vector2D`, która będzie reprezentować wektor dwuwymiarowy. Klasa powinna zawierać metody magiczne `__add__` oraz `__radd__`, aby umożliwić dodawanie dwóch wektorów 2D oraz dodawanie krotek `(x, y)` do wektorów.

Zadanie 4. Napisz klasę `Polynomial`, która będzie reprezentować wielomian jednej zmiennej. Klasa powinna zawierać metody magiczne `__add__`, `__radd__`, `__getitem__` oraz `__setitem__`, aby umożliwić dodawanie dwóch wielomianów, dodawanie liczby rzeczywistej do wielomianu, uzyskiwanie współczynników wielomianu oraz ustawianie wartości współczynników.

Zadanie 5. Napisz klasę `Playlist`, która będzie reprezentować listę odtwarzania utworów muzycznych. Klasa powinna zawierać metody magiczne `__add__`, `__radd__`, `__getitem__` oraz `__setitem__`, aby umożliwić łączenie dwóch list odtwarzania, dodawanie utworu do listy odtwarzania, uzyskiwanie utworów z listy odtwarzania oraz ustawianie wartości utworów na liście odtwarzania.

Zadanie 6. Napisz klasę `Car`, która będzie reprezentować samochód. Klasa powinna zawierać atrybuty instancyjne `make`, `model`, `year`, `mileage` oraz `price`, inicjalizator, właściwości dla `mileage` oraz `price` (umożliwiające odczyt i zapis z walidacją wartości) oraz metody magiczne `__str__` i `__repr__`. Dodatkowo, klasa powinna posiadać metody `drive` (aktualizującą przebieg samochodu) oraz calculate_depreciation (obliczającą spadek wartości samochodu na podstawie jego przebiegu i wieku).

Zadanie 7. Napisz klasę `Samochod`, która będzie mieć następujące atrybuty instancyjne:

- `marka` - marka samochodu
- `model` - model samochodu
- `rok_produkcji` - rok produkcji samochodu
- `przebieg` - przebieg samochodu

Klasa powinna mieć następujące metody:

- `__init__(self, marka, model, rok_produkcji, przebieg)` - konstruktor, który będzie inicjalizował atrybuty `marka`, `model`, `rok_produkcji` i `przebieg`
- `__str__(self)` - metoda magiczna, która będzie zwracać reprezentację napisową obiektu klasy `Samochod`
- `__lt__(self, other)` - metoda magiczna, która będzie porównywać dwa samochody po ich przebiegu. Metoda ma zwracać `True`, jeśli przebieg samochodu `self` jest mniejszy niż przebieg samochodu `other`, a w przeciwnym wypadku `False`.
