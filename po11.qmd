---
title: "Dzień 3 - Polimorfizm"
format: html
---

Polimorfizm to inaczej "wielopostaciowość". Innymi słowy, mechanizmy pozwalające programiście używać wartości, zmiennych i podprogramów na kilka różnych sposobów.

**Jak to jest zaimplementowane w języku Python?**

Ćwiczenie. Stwórz klasy dotyczące osoby, książki i zwierzęcia (z kilkoma polami) do ćwiczenia poniższych konstrukcji.

### Polimorfizm wbudowanych operatorów

Kod nr 1:
```python
a = 4
b = 2
c = a + b
print(c)
s1 = "abc"
s2 = "xyz"
s3 = s1 + s2
print(s3)

```

### Polimorfizm wbudowanych metod/funkcji

Kod nr 2
```python
print(len("abcde"))
print(len([3, -2, 8, 2, 2, -2, 0]))

```

### Przeciążanie funkcji (?) - domyślna wartość argumentu

Kod nr 3
```python
def sumxyz(x, y, z=0):
    return x + y + z


print(sumxyz(1, 2, 3))
print(sumxyz(3, 4))

```

### Przeciążenie metody w klasie - domyślna wartość argumentu

Kod nr 4
```python
class Number:
    def sum(self, a=None, b=None, c=None):
        s = 0
        if a is not None and b is not None and c is not None:
            s = a + b + c
        elif a is not None and b is not None:
            s = a + b
        else:
            s = a
        return s


x = Number()
print(x.sum(1))
print(x.sum(3, 5))
print(x.sum(1, 2, 3))
```

### Przeciążanie operatora w klasie

Kod nr 5
```python
class Student:

    def __init__(self, m1, m2):
        self.m1 = m1
        self.m2 = m2

    def __add__(self, other):
        m1 = self.m1 + other.m1
        m2 = self.m2 + other.m2
        s3 = Student(m1, m2)
        return s3


s1 = Student(58, 59)
s2 = Student(60, 65)
s3 = s1 + s2
print(s3.m1)
```

Tzw "magiczne metody"

* <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>
* <https://www.python-course.eu/python3_magic_methods.php>


### Polimorfizm metod w różnych klasach (bez związku między klasami)

Kod nr 6
```python
class Cat:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def info(self):
        print(f"I am a cat. My name is {self.name}. I am {self.age} years old.")

    def make_sound(self):
        print("Meow")


class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def info(self):
        print(f"I am a dog. My name is {self.name}. I am {self.age} years old.")

    def make_sound(self):
        print("Bark")


cat1 = Cat("Kitty", 2.5)
dog1 = Dog("Fluffy", 4)
animals = [cat1, dog1]

for animal in animals:
    animal.make_sound()
    animal.info()
    animal.make_sound()

```

### Polimorfizm przy dziedziczeniu (przesłanianie metod)

Kod nr 7
```python
from math import pi


class Shape:
    def __init__(self, name):
        self.name = name

    def area(self):
        pass

    def fact(self):
        return "I am a two-dimensional shape."

    def __str__(self):
        return self.name


class Square(Shape):
    def __init__(self, length):
        super().__init__("Square")
        self.length = length

    def area(self):
        return self.length ** 2

    def fact(self):
        return "Squares have each angle equal to 90 degrees."


class Circle(Shape):
    def __init__(self, radius):
        super().__init__("Circle")
        self.radius = radius

    def area(self):
        return pi * self.radius ** 2


figures = [Shape("Nazwa"), Circle(2), Square(3)]
for f in figures:
    print(f.area())

```





