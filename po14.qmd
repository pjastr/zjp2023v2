---
title: "Dzień 3 - Obsługa błędów"
format: html
---

Dokumentacja <https://docs.python.org/3/tutorial/errors.html>

Kodn nr 1
```python
10 * (1/0)
4 + spam*3
'2' + 2
```

Kod nr 2
```python
while True:
    try:
        x = int(input("Please enter a number: "))
        break
    except ValueError:
        print("Oops!  That was no valid number.  Try again...")


print("number", x)

```

Kod nr 3
```python
try:
    raise Exception('spam', 'eggs')
except Exception as inst:
    print(type(inst))    # the exception instance
    print(inst.args)     # arguments stored in .args
    print(inst)          # __str__ allows args to be printed directly,
                         # but may be overridden in exception subclasses
    x, y = inst.args     # unpack args
    print('x =', x)
    print('y =', y)
```

Kod nr 4
```python
class B(Exception):
    pass

class C(B):
    pass

class D(C):
    pass

for cls in [B, C, D]:
    try:
        raise cls()
    except D:
        print("D")
    except C:
        print("C")
    except B:
        print("B")
```

Kod nr 5
```python
def this_fails():
    x = 1/0

try:
    this_fails()
except ZeroDivisionError as err:
    print('Handling run-time error:', err)
```

Kod nr 6
```python
try:
    raise NameError('HiThere')
except NameError:
    print('An exception flew by!')
    raise
```

Kod nr 7
```python
try:
    raise KeyboardInterrupt
finally:
    print('Goodbye, world!')
```

Kod nr 8
```python
def divide(x, y):
    try:
        result = x / y
    except ZeroDivisionError:
        print("division by zero!")
    else:
        print("result is", result)
    finally:
        print("executing finally clause")


divide(2, 1)
divide(2, 0)
divide("2", "1")
```

Ćwiczenie. Stwórz klasę `Calculator` i dodaj w niej kilka metod (bez __) symulujących operacje arytmetyczne. Zabezpiecz działanie przed wykrzucaniem błędów.
