---
title: "Dzień 1 - Metody w klasie"
format: html
---


Metody definiują zachowanie, umożliwiając im wykonywanie konkretnych zadań.

Czemu używa się określenie metody, a nie funkcje?

* Matematyczna definicja funkcji:

Funkcja – dla danych dwóch zbiorów $X$ i $Y$ przyporządkowanie każdemu elementowi zbioru $X$ dokładnie jednego elementu zbioru $Y$.

* Metody mogą być "szerzej rozumiane". Mamy metody bez parametru
(czyli bez $X$) i metody bez typu zwracanego (`void`, czyli bez zbioru $Y$).

**Inaczej ważniejszy kontekst: metody to funkcje w klasach.**

Kod nr 1:
```python
import math


class Point:
    x = 4
    y = 2

    def reset(self):
        self.x = 0
        self.y = 0

    def left(self, move):
        self.x -= move

    def move(self, mx, my):
        self.x += mx
        self.y += my

    def dist(self):
        return math.sqrt(self.x ** 2 + self.y ** 2)


p1 = Point()
p1.reset()
print(p1.x, p1.y)
print(p1.dist())
p1.move(3, 4)
print(p1.x, p1.y)
print(p1.dist())

```

**Ćwiczenie.** Stwórz klasę `Liczba`. Dodaj w niej pole wartosc i przypisz mu wartość początkową 0. Stwórz metody o nazwach Dodaj i Odejmij, każda z nich ma być z jednym parametrem typu int, ich zadaniem jest odpowiednio powiększenie lub pomniejszenie pola wartosc o podanych parametr. Przetestuj działanie funkcji.


Kod nr 2:
```python
import math


class Point:
    x = 4
    y = 2

    def reset(self):
        self.x = 0
        self.y = 0

    def left(self, move):
        self.x -= move

    def move(self, mx, my):
        self.x += mx
        self.y += my

    def dist(self):
        return math.sqrt(self.x ** 2 + self.y ** 2)

    def dist2(self, other):
        return math.sqrt((self.x - other.x) ** 2 + (self.y - other.y) ** 2)


p1 = Point()
p1.move(-1, 1)
p2 = Point()
print(p1.dist())
print(p1.dist2(p2))
print(p1.dist2(p1))

```

Jak to zrobić lepiej?

Kod nr 3:
```python
import math


class Point:
    x = 4
    y = 2

    def reset(self):
        self.x = 0
        self.y = 0

    def left(self, move):
        self.x -= move

    def move(self, mx, my):
        self.x += mx
        self.y += my

    def dist(self, other=None):
        if other is None:
            return math.sqrt(self.x ** 2 + self.y ** 2)
        else:
            return math.sqrt((self.x - other.x) ** 2 + (self.y - other.y) ** 2)


p1 = Point()
p1.move(-1, 1)
p2 = Point()
print(p1.dist())
print(p1.dist(p2))
print(p1.dist(p1))

```

**Ćwiczenie.** Napisz klasę `Rectangle` z dwoma polami `width` oraz `height`. Dodaj w tej klasie dwie metody: jedna zwraca pole a druga zwraca obwód prostokąta. Następnie dodaj metodę wyświetlającą informację o obiekcie np. `Szerokość: 20, Wysokość: 30, Pole: 600, Obwód: 100.`

